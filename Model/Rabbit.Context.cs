//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RabbitMPEntities : DbContext
    {
        public RabbitMPEntities()
            : base("name=RabbitMPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<ActivatedLogPrescriptions> ActivatedLogPrescriptions { get; set; }
        public virtual DbSet<ActivatedLogs> ActivatedLogs { get; set; }
        public virtual DbSet<Addresses> Addresses { get; set; }
        public virtual DbSet<AdivserAudits> AdivserAudits { get; set; }
        public virtual DbSet<AdviserAndCommunities> AdviserAndCommunities { get; set; }
        public virtual DbSet<Advisers> Advisers { get; set; }
        public virtual DbSet<Announcements> Announcements { get; set; }
        public virtual DbSet<ARInvitationCodes> ARInvitationCodes { get; set; }
        public virtual DbSet<AuditNotices> AuditNotices { get; set; }
        public virtual DbSet<Authentications> Authentications { get; set; }
        public virtual DbSet<Broadcasts> Broadcasts { get; set; }
        public virtual DbSet<Captchas> Captchas { get; set; }
        public virtual DbSet<CarAndCommunities> CarAndCommunities { get; set; }
        public virtual DbSet<Collections> Collections { get; set; }
        public virtual DbSet<Commodities> Commodities { get; set; }
        public virtual DbSet<CommunityAdministrators> CommunityAdministrators { get; set; }
        public virtual DbSet<CommunityEntities> CommunityEntities { get; set; }
        public virtual DbSet<CommunityToRules> CommunityToRules { get; set; }
        public virtual DbSet<CommunityUsers> CommunityUsers { get; set; }
        public virtual DbSet<CommunityUserToOtherTables> CommunityUserToOtherTables { get; set; }
        public virtual DbSet<DailyInformations> DailyInformations { get; set; }
        public virtual DbSet<DoorGroups> DoorGroups { get; set; }
        public virtual DbSet<DoorOpenLogs> DoorOpenLogs { get; set; }
        public virtual DbSet<Doors> Doors { get; set; }
        public virtual DbSet<DoorTypes> DoorTypes { get; set; }
        public virtual DbSet<DynamicContents> DynamicContents { get; set; }
        public virtual DbSet<DynamicFieIdOfCommunities> DynamicFieIdOfCommunities { get; set; }
        public virtual DbSet<EveryDayDataOfCommunities> EveryDayDataOfCommunities { get; set; }
        public virtual DbSet<FeedBacks> FeedBacks { get; set; }
        public virtual DbSet<Floors> Floors { get; set; }
        public virtual DbSet<FloorToDoors> FloorToDoors { get; set; }
        public virtual DbSet<InformationContents> InformationContents { get; set; }
        public virtual DbSet<InformationTypes> InformationTypes { get; set; }
        public virtual DbSet<IntegralLogs> IntegralLogs { get; set; }
        public virtual DbSet<IntegralRules> IntegralRules { get; set; }
        public virtual DbSet<InvitationLogRelations> InvitationLogRelations { get; set; }
        public virtual DbSet<InvitationLogs> InvitationLogs { get; set; }
        public virtual DbSet<InvitationMessages> InvitationMessages { get; set; }
        public virtual DbSet<JinshujuDatas> JinshujuDatas { get; set; }
        public virtual DbSet<Labels> Labels { get; set; }
        public virtual DbSet<MachineMessages> MachineMessages { get; set; }
        public virtual DbSet<MachineModels> MachineModels { get; set; }
        public virtual DbSet<Machines> Machines { get; set; }
        public virtual DbSet<Materials> Materials { get; set; }
        public virtual DbSet<NegotiateLogs> NegotiateLogs { get; set; }
        public virtual DbSet<PostDetails> PostDetails { get; set; }
        public virtual DbSet<PostReplies> PostReplies { get; set; }
        public virtual DbSet<Posts> Posts { get; set; }
        public virtual DbSet<Problems> Problems { get; set; }
        public virtual DbSet<Qus> Qus { get; set; }
        public virtual DbSet<RedPacketRules> RedPacketRules { get; set; }
        public virtual DbSet<RedPackets> RedPackets { get; set; }
        public virtual DbSet<RedSQLs> RedSQLs { get; set; }
        public virtual DbSet<ReplyMessages> ReplyMessages { get; set; }
        public virtual DbSet<Rules> Rules { get; set; }
        public virtual DbSet<SettleBillRecords> SettleBillRecords { get; set; }
        public virtual DbSet<ShopOrderLists> ShopOrderLists { get; set; }
        public virtual DbSet<ShopOrders> ShopOrders { get; set; }
        public virtual DbSet<Stories> Stories { get; set; }
        public virtual DbSet<StoryLogs> StoryLogs { get; set; }
        public virtual DbSet<StoryTypes> StoryTypes { get; set; }
        public virtual DbSet<Streets> Streets { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Tactics> Tactics { get; set; }
        public virtual DbSet<Tokens> Tokens { get; set; }
        public virtual DbSet<TypeRelationships> TypeRelationships { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Villages> Villages { get; set; }
        public virtual DbSet<WechatAppUsers> WechatAppUsers { get; set; }
        public virtual DbSet<WechatQrCodes> WechatQrCodes { get; set; }
        public virtual DbSet<WechatQrStrScenes> WechatQrStrScenes { get; set; }
        public virtual DbSet<WechatUsers> WechatUsers { get; set; }
        public virtual DbSet<aaa> aaa { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
